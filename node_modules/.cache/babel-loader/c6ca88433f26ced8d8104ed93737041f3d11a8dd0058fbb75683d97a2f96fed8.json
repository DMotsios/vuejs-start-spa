{"ast":null,"code":"import NavbarLink from './NavbarLink.vue';\nexport default {\n  components: {\n    NavbarLink\n  },\n  inject: ['$pages', '$bus'],\n  computed: {\n    publishedPages() {\n      console.log(this.pages.map((page, index) => ({\n        ...page,\n        index\n      })).filter(page => page.published));\n      return this.pages.map((page, index) => ({\n        ...page,\n        index\n      })).filter(page => page.published);\n    }\n  },\n  created() {\n    this.getThemeSetting();\n    this.pages = this.$pages.getAllPages();\n    this.$bus.$on('page-updated', () => {\n      this.pages = [...this.$pages.getAllPages()];\n    });\n    this.$bus.$on('page-created', () => {\n      this.pages = [...this.$pages.getAllPages()];\n    });\n    this.$bus.$on('page-deleted', () => {\n      this.pages = [...this.$pages.getAllPages()];\n    });\n  },\n  data() {\n    return {\n      theme: 'light',\n      pages: []\n    };\n  },\n  methods: {\n    changeTheme() {\n      this.theme = this.theme === 'light' ? 'dark' : 'light';\n      this.storeThemeSetting();\n    },\n    storeThemeSetting() {\n      localStorage.setItem('theme', this.theme);\n    },\n    getThemeSetting() {\n      let theme = localStorage.getItem('theme');\n      if (theme) {\n        this.theme = theme;\n      } else {\n        theme = 'light';\n      }\n    }\n  }\n};","map":{"version":3,"names":["NavbarLink","components","inject","computed","publishedPages","console","log","pages","map","page","index","filter","published","created","getThemeSetting","$pages","getAllPages","$bus","$on","data","theme","methods","changeTheme","storeThemeSetting","localStorage","setItem","getItem"],"sources":["C:\\Users\\motsi\\OneDrive\\Desktop\\vuejs\\vue-start-spa\\src\\components\\Navbar.vue"],"sourcesContent":["<template>\r\n    <nav :class=\"[`navbar-${theme}`, `bg-${theme}`, 'vanbar', 'navbar-expand-lg']\">\r\n        <div class=\"container-fluid\" style=\"display: flex; padding:10px;\">\r\n            <ul class=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                <navbar-link :page=\"page\" :index=\"index\" v-for=\"(page, index) in publishedPages\" class=\"nav-item\"\r\n                    :key=\"index\">\r\n                </navbar-link>\r\n\r\n                <li> <router-link :to=\"`/pages`\" class=\"nav-link\" aria-current=\"page\" style=\"margin-right: 5px;\"\r\n                        active-class=\"active\">\r\n                        Pages</router-link></li>\r\n            </ul>\r\n            <button class=\"btn btn-primary\" @click.prevent=\"changeTheme()\">\r\n                Toggle\r\n            </button>\r\n\r\n        </div>\r\n    </nav>\r\n\r\n</template>\r\n\r\n<script>\r\nimport NavbarLink from './NavbarLink.vue'\r\n\r\nexport default {\r\n    components: {\r\n        NavbarLink\r\n    },\r\n    inject: ['$pages', '$bus'],\r\n    computed: {\r\n        publishedPages() {\r\n            console.log(this.pages.map((page, index) => ({ ...page, index })).filter(page => page.published))\r\n            return this.pages.map((page, index) => ({ ...page, index })).filter(page => page.published);\r\n        }\r\n    },\r\n    created() {\r\n        this.getThemeSetting()\r\n        this.pages = this.$pages.getAllPages();\r\n        this.$bus.$on('page-updated', () => {\r\n            this.pages = [...this.$pages.getAllPages()];\r\n        });\r\n        this.$bus.$on('page-created', () => {\r\n            this.pages = [...this.$pages.getAllPages()];\r\n        });\r\n        this.$bus.$on('page-deleted', () => {\r\n            this.pages = [...this.$pages.getAllPages()];\r\n        });\r\n    },\r\n    data() {\r\n        return {\r\n            theme: 'light',\r\n            pages: []\r\n        }\r\n    },\r\n    methods: {\r\n        changeTheme() {\r\n            this.theme = this.theme === 'light' ? 'dark' : 'light'\r\n            this.storeThemeSetting()\r\n        },\r\n\r\n        storeThemeSetting() {\r\n            localStorage.setItem('theme', this.theme)\r\n        },\r\n\r\n        getThemeSetting() {\r\n            let theme = localStorage.getItem('theme')\r\n            if (theme) {\r\n                this.theme = theme\r\n            } else {\r\n                theme = 'light';\r\n            }\r\n        }\r\n    }\r\n}\r\n</script>"],"mappings":"AAsBA,OAAOA,UAAS,MAAO,kBAAiB;AAExC,eAAe;EACXC,UAAU,EAAE;IACRD;EACJ,CAAC;EACDE,MAAM,EAAE,CAAC,QAAQ,EAAE,MAAM,CAAC;EAC1BC,QAAQ,EAAE;IACNC,cAAcA,CAAA,EAAG;MACbC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACC,KAAK,CAACC,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,MAAM;QAAE,GAAGD,IAAI;QAAEC;MAAM,CAAC,CAAC,CAAC,CAACC,MAAM,CAACF,IAAG,IAAKA,IAAI,CAACG,SAAS,CAAC;MAChG,OAAO,IAAI,CAACL,KAAK,CAACC,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,MAAM;QAAE,GAAGD,IAAI;QAAEC;MAAM,CAAC,CAAC,CAAC,CAACC,MAAM,CAACF,IAAG,IAAKA,IAAI,CAACG,SAAS,CAAC;IAC/F;EACJ,CAAC;EACDC,OAAOA,CAAA,EAAG;IACN,IAAI,CAACC,eAAe,CAAC;IACrB,IAAI,CAACP,KAAI,GAAI,IAAI,CAACQ,MAAM,CAACC,WAAW,CAAC,CAAC;IACtC,IAAI,CAACC,IAAI,CAACC,GAAG,CAAC,cAAc,EAAE,MAAM;MAChC,IAAI,CAACX,KAAI,GAAI,CAAC,GAAG,IAAI,CAACQ,MAAM,CAACC,WAAW,CAAC,CAAC,CAAC;IAC/C,CAAC,CAAC;IACF,IAAI,CAACC,IAAI,CAACC,GAAG,CAAC,cAAc,EAAE,MAAM;MAChC,IAAI,CAACX,KAAI,GAAI,CAAC,GAAG,IAAI,CAACQ,MAAM,CAACC,WAAW,CAAC,CAAC,CAAC;IAC/C,CAAC,CAAC;IACF,IAAI,CAACC,IAAI,CAACC,GAAG,CAAC,cAAc,EAAE,MAAM;MAChC,IAAI,CAACX,KAAI,GAAI,CAAC,GAAG,IAAI,CAACQ,MAAM,CAACC,WAAW,CAAC,CAAC,CAAC;IAC/C,CAAC,CAAC;EACN,CAAC;EACDG,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,KAAK,EAAE,OAAO;MACdb,KAAK,EAAE;IACX;EACJ,CAAC;EACDc,OAAO,EAAE;IACLC,WAAWA,CAAA,EAAG;MACV,IAAI,CAACF,KAAI,GAAI,IAAI,CAACA,KAAI,KAAM,OAAM,GAAI,MAAK,GAAI,OAAM;MACrD,IAAI,CAACG,iBAAiB,CAAC;IAC3B,CAAC;IAEDA,iBAAiBA,CAAA,EAAG;MAChBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAE,IAAI,CAACL,KAAK;IAC5C,CAAC;IAEDN,eAAeA,CAAA,EAAG;MACd,IAAIM,KAAI,GAAII,YAAY,CAACE,OAAO,CAAC,OAAO;MACxC,IAAIN,KAAK,EAAE;QACP,IAAI,CAACA,KAAI,GAAIA,KAAI;MACrB,OAAO;QACHA,KAAI,GAAI,OAAO;MACnB;IACJ;EACJ;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}